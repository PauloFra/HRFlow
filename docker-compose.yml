version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15.5-alpine
    container_name: hrflow-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: hrflow_db
      POSTGRES_USER: hrflow_user
      POSTGRES_PASSWORD: hrflow_password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - hrflow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hrflow_user -d hrflow_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache & Session Store
  redis:
    image: redis:7.2.4-alpine
    container_name: hrflow-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass hrflow_redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - hrflow-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Zookeeper (Required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    container_name: hrflow-zookeeper
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - hrflow-network

  # Apache Kafka
  kafka:
    image: confluentinc/cp-kafka:7.5.3
    container_name: hrflow-kafka
    restart: unless-stopped
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - hrflow-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MinIO Object Storage
  minio:
    image: minio/minio:RELEASE.2024-01-16T16-07-38Z
    container_name: hrflow-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: hrflow_minio_user
      MINIO_ROOT_PASSWORD: hrflow_minio_password
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    volumes:
      - minio_data:/data
    networks:
      - hrflow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # HRFlow Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: hrflow-backend
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://hrflow_user:hrflow_password@postgres:5432/hrflow_db
      REDIS_URL: redis://hrflow_redis_password@redis:6379
      KAFKA_BROKERS: kafka:29092
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: hrflow_minio_user
      MINIO_SECRET_KEY: hrflow_minio_password
      JWT_SECRET: hrflow_jwt_secret_key_development_only
      JWT_REFRESH_SECRET: hrflow_jwt_refresh_secret_key_development_only
      SMTP_HOST: mailhog
      SMTP_PORT: 1025
      SMTP_USER: ""
      SMTP_PASS: ""
      APP_URL: http://localhost:3001
      FRONTEND_URL: http://localhost:3000
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - backend_uploads:/app/uploads
    networks:
      - hrflow-network
    command: npm run dev

  # HRFlow Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: hrflow-frontend
    restart: unless-stopped
    depends_on:
      - backend
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_WS_URL: ws://localhost:3001
      NEXT_PUBLIC_APP_NAME: HRFlow
      NEXT_PUBLIC_APP_VERSION: 1.0.0
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - hrflow-network
    command: npm run dev

  # MailHog (Email Testing)
  mailhog:
    image: mailhog/mailhog:v1.0.1
    container_name: hrflow-mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - hrflow-network

  # NGINX Reverse Proxy (Production)
  nginx:
    image: nginx:1.25.3-alpine
    container_name: hrflow-nginx
    restart: unless-stopped
    depends_on:
      - backend
      - frontend
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker/ssl:/etc/ssl/certs
    networks:
      - hrflow-network
    profiles:
      - production

# Named Volumes for Data Persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  kafka_data:
    driver: local
  minio_data:
    driver: local
  backend_uploads:
    driver: local

# Custom Network
networks:
  hrflow-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 